# 技术栈与版本
- uni-app框架 (HBuilderX 3.6+)， Vue 2.6.x，Vuex 3.6.x

# 项目结构
- components/: 公共组件
- pages/: 页面文件
- packageExercise/: 运动子包
- packageNutrition/: 饮食子包
- packageMedical/: 医疗子包
- packageSocial/: 社交子包
- static/: 静态资源
- store/: Vuex状态管理
- services/: API服务层
- utils/: 工具函数
- config/: 配置文件

# 核心工具与规范
1. 配置管理：
   - 页面路由配置集中在pages.json
   - 全局配置在config/config.js
   - API接口定义在config/api.js

2. 工具函数：
   - utils/date.js: 日期处理工具
   - utils/validation.js: 表单验证工具
   - utils/filter.js: 全局过滤器
   - utils/storage.js: 本地存储封装
   - utils/request.js: 网络请求封装
   - utils/permission.js: 路由拦截器

3. 接口调用：
 - 所有后台api接口调用，必须通过Vuex来处理，严禁直接从页面调用API，调用过程如下：vue页面 → Vuex模块(store/modules/) → 服务层(services/) → 请求层(utils/request.js) → API(config/api.js)
 - 后台返回接口格式：{code: 0, message: 'success', data: {}} ,code是0表示成功。

# Vuex使用规范
   - 使用mapState，mapActions映射state和actions到组件方法
   - 每个业务模块创建独立的store模块，并在store/index.js中聚合所有模块
   - 每个模块包含state、mutations、actions、getters

# from 表单说明
 - u-form 智能通过如下方法设置规则:
   onReady() {
     //onReady 为uni-app支持的生命周期之一
     this.$refs.uForm.setRules(this.rules)
   }

# 开发规范
1. 组件使用：优先使用uni-app以及uni-ui的组件，尽量多使用uni-ui组件提升效果，避免重复造轮子，力求代码简洁，自定义组件需遵循单一职责原则。
2. 样式规范：使用sass语言，优先使用uni-app和uni-ui提供的内置样式，自定义样式采用BEM命名规范，使用rpx单位确保响应式设计。
3. UI设计规范：
   - 主色调：#4CAF50
   - 浅灰背景：#F5F7FA
   - 强调色：#FF9800
   - 警示红：#F44336
   - 主要文字：#212121
   - 次要文字：#757575
   - 提示文字：#9E9E9E
   - 反白文字：#FFFFFF
4. 性能优化：合理使用async/await处理异步，大列表使用虚拟列表，合理使用图片懒加载，避免不必要的深层数据监听。
5. 错误处理：表单错误使用uni-app提供的校验机制，API错误统一拦截并友好提示，使用try/catch处理可预见异常。
6. 按钮点击事件命名：以handle开头，如handleSendCode、handleChangePhone